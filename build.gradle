/*
 * Copyright (c) 2020 CodeHead Systems. All rights reserved
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.


// Testing in Intelij requires the library in your lib path. Errors will show where it needs to be. Example
// from an Ubuntu box
//  sudo mkdir /usr/lib/jni
//  sudo cp -i oop-mock-dynamodb/build/libs/libsqlite4java-linux-amd64-1.0.392.so /usr/lib/jni
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.google.com" } // Google's Maven repository
        gradlePluginPortal() // was jcenter() which is dying
        google()
    }
    dependencies {
        classpath 'org.gretty:gretty:3.0.2'
    }
}

allprojects {
    group 'com.codeheadsystems'
    version '1.0.0'
    apply plugin: "java-library"
    apply plugin: "eclipse"
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()  // was jcenter() which is dying
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
    test {
        useJUnitPlatform() // needed for junit5
        finalizedBy jacocoTestReport
    }
    checkstyleTest { // ignore checkstyle in tests
        ignoreFailures true
        showViolations false
    }
    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            csv.enabled true
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/dagger/**.class',
                        '**/Dagger*Builder.class',
                        '**/*Exception.class',
                        '**/*Module.class',
                        '**/*_Factory.class',
                        '**/*_Factory.*class',
                        '**/*InstanceHolder.class',
                        '**/*_Factory$InstanceHolder.class'
                ])
            }))
        }
    }
    def excludeFiles = [
            '**.dagger.**',
            '**.Dagger*Builder',
            '**.*Exception',
            '**.*Module',
            '**.*_Factory',
            '**.*_Factory*',
            '**.InstanceHolder',
            '**.*_Factory$InstanceHolder'
    ]

// If you want to override, use this in your package and set. This is the low bar.
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                excludes = excludeFiles
                element = 'CLASS'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
            }
            rule {
                excludes = excludeFiles
                element = 'CLASS'
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.7
                }
            }
        }
    }
}


